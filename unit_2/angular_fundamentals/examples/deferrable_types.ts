import { Component, signal } from '@angular/core';

import { bootstrapApplication } from '@angular/platform-browser';
 
@Component({

  selector: 'app-root',

  standalone: true,

  template: `
<h1>Ejemplos de Deferrable Views</h1>
 
    <!-- Hover -->
<div #hoverArea style="border:1px solid gray; padding:10px; margin-bottom:15px;">
<strong>Pasa el mouse aqu√≠:</strong>

      @defer (on hover(hoverArea)) {
<p>üñ±Ô∏è Cargado al hacer hover.</p>

      } @placeholder {
<p>‚è≥ Esperando hover‚Ä¶</p>

      }
</div>
 
    <!-- Interaction -->
<button #btn style="margin-bottom:15px;">

      Haz clic para cargar contenido diferido
</button>

    @defer (on interaction(btn)) {
<p>üëç Cargado al hacer click en el bot√≥n.</p>

    } @placeholder {
<p>‚è≥ Esperando interacci√≥n‚Ä¶</p>

    }
 
    <!-- Viewport -->
<div style="margin-top:500px; border:1px solid blue; padding:10px;">
<strong>Scroll hacia aqu√≠:</strong>

      @defer (on viewport) {
<p>üëÄ Cargado al entrar en el viewport.</p>

      } @placeholder {
<p>‚è≥ Esperando que entres al viewport‚Ä¶</p>

      }
</div>
 
    <!-- Condici√≥n -->
<div style="margin-top:20px; border:1px solid green; padding:10px;">
<button (click)="activar()">Activar condici√≥n</button>

      @defer (when condicion()) {
<p>‚úÖ Cargado porque la condici√≥n es true.</p>

      } @placeholder {
<p>‚è≥ Esperando condici√≥n‚Ä¶</p>

      }
</div>

  `,

})

export class AppComponent {

  condicion = signal(false);

  activar() {

    this.condicion.set(true);

  }

}
 
bootstrapApplication(AppComponent).catch(err => console.error(err));
 